rd_("CnA trait for a concrete type to push <code>OutEvent</code>s to.CiGet a reference to the node\xe2\x80\x99s <code>PeerIdentity</code>oRun simulationsDfFirst <code>count</code> bootstrap peers are created and join each \xe2\x80\xa6B`Public API for using iroh-gossipClCalculates the minimum, maximum, and mean for each value \xe2\x80\xa6DdCalculates the average between a list of <code>RoundStatsAvg</code>.CiReturns a new latency value to use for a peer connection.AkGet an item from the cache.BlThe maximum last delivery hop in this round.ClThe difference in <code>RoundStats::ldh</code>, as a factor.CjThe number of rounds for which this average is calculated.BgGet the number of entries in the cache.BeReturns the maximum latency possible.CfCalculates the maximum for each value in a list of \xe2\x80\xa6AoThe maximum values of the list.BlThe difference, as factors, in the maximumx.CbThe upper bound for the latency between two peers.CfCalculates the minimum for each value in a list of \xe2\x80\xa6AoThe minimum values of the list.BlThe difference, as factors, in the minimums.CbThe lower bound for the latency between two peers.CdNetworking for the <code>iroh-gossip</code> protocolCfCreate a new <code>PeerData</code> from a byte buffer.BeCreate a new protocol state instance.AfCreates a new network.AhCreates a new simulator.CmInitialize the local state with the default random number \xe2\x80\xa6AmCreate a new, empty TimerMap.BnThe relative message redundancy in this round.ClThe difference in <code>RoundStats::rmr</code>, as a factor.CkCreates a new random number generator, derived from the \xe2\x80\xa6CaSimulation framework for testing the protocol \xe2\x80\xa6AbALPN protocol nameoA data message.BeJoin this topic and connect to peers.BdLeave this topic and drop all state.BgSet the ALPN this gossip instance uses.ClCalculates the difference factors for each value between \xe2\x80\xa6DhCalculates the difference, as factors, between <code>self</code> and \xe2\x80\xa6DbConsume the selector and return a <code>Result</code> with the \xe2\x80\xa6AoReturns the argument unchanged.0000000000000000000000000000000000000000000000000000000000BaCalls <code>U::from(self)</code>.0000000000000000000000000000000000000000000000000000000000BdIterate over all items in the cache.AlGet the kind of this message0BaDistribution of lazy peer counts.DhCalculates the mean for each value in a list of <code>RoundStats</code>.AlThe mean values of the list.BoThe difference, as factors, in the mean values.ChReturns the <code>State</code> for a peer, if it exists.BaPush an event in the IO containerBdGet the encoded size of this message0BmUtilities used in the protocol implementationBcEvents emitted from a gossip topic.CnAn event to be emitted to the application for a particular \xe2\x80\xa6BhThe broadcast scope of a gossip message.CcThe state of the <code>iroh-gossip</code> protocol.CfThe topic state maintains the swarm membership and \xe2\x80\xa6BlStatistics for the protocol state of a topicCmThis message was received from the swarm, with a distance \xe2\x80\xa6CcThe message is broadcast to all peers in the swarm.BgA message of the swarm membership layerAkA timer for the swarm layerBiA timer to be registered into the runtimeC`A timer to be registered for a particular topic.CdConsume the selector and return the associated errorAoReturns all active connections.BgNumber of bootstrap peers to join firstBbDistribution of eager peer counts.DcGet a reference to the earliest entry in the <code>TimerMap</code>.CkGet a reference to the contained <code>bytes::Bytes</code>.AiNumber of nodes to createCmImplementation of the iroh-gossip protocol, as an IO-less \xe2\x80\xa6BfDefault protocol config for all peers.CmThe scope of the message. This tells us if the message is \xe2\x80\xa6BlSpawn a gossip actor and get a handle for itEnSplits <code>self</code> into <code>GossipSender</code> and <code>GossipReceiver</code> parts.ClThe protocol state of the <code>iroh-gossip</code> protocol.CbGet a reference to the protocol state for a topic.CfGet stats on how many messages were sent and received.ClThis module contains the implementation of the gossiping \xe2\x80\xa6AlThe gossip topic was closed.AfProtocol configurationBjPublish and subscribe on gossiping topics.BgA message of the gossip broadcast layerAlA timer for the gossip layerDkWe missed some messages because our <code>GossipReceiver</code> was not \xe2\x80\xa6AmAll peers join a single peer.AmUse the same latency, always.BnDistribution of active view (neighbor) counts.AoConfiguration of the simulator.AiDrains all queued events.AnHandle an <code>InEvent</code>AiHandle an incoming event.AcInserts a new peer.BlInsert a new entry at the specified instant.ClInsert an item into the cache, marked with an expiration \xe2\x80\xa6CbWaits until we are connected to at least one node.0ChListen on a quinn endpoint for incoming RPC connections.CaThe number of undelivered messages in this round.CoThe difference in <code>RoundStats::missed</code>, as a factor.ChRemoves a peer, breaking all connections to other peers.CnReturns a report with histograms on active, passive, eager \xe2\x80\xa6CeReturns a report on the current state of the network.CdGet an iterator for the states of all joined topics.BeGet an iterator of all joined topics.CgBuilder to configure and construct <code>Gossip</code>.AkCommand for a gossip topic.BgExecute a command from the application.CgA command to the protocol state for a particular topic.1AgCompare simulation runsAbA control message.CiChose a random latency for each connection within the \xe2\x80\xa6BbInput event to the protocol state.BgInput event to the topic state handler.A`A gossip messageAeProtocol wire messageBiA protocol message for a particular topicAnEnum of metrics for the moduleAlTest network implementation.AjThe identifier for a topicCnCreates a default <code>Builder</code>, with the endpoint set.AnQueues and performs a command.BdConnect to a remote as a RPC client.AjThe content of the messageBfDefault values for the HyParView layerC`Sensible defaults for the plumtree configurationCdReturns the time elapsed since starting the network.BdGet the expiration time for an item.BeConfigures the latency between peers.AgMetrics for iroh-gossipCeReturns the metrics tracked for this gossip instance.AhThe <code>Network</code>BdDistribution of passive view counts.AeMaps seeds to resultsBeOutput event from the protocol state.BgAn output event from the state handler.CkOpaque binary data that is transmitted on messages that \xe2\x80\xa6AaUpdated peer dataCoEmitted when new <code>PeerData</code> was received for a peer.BlWe received a gossip message for this topic.BlA gossip message was received for this topicEdA <code>BinaryHeap</code> with entries sorted by <code>Instant</code>. Allows to \xe2\x80\xa6BbGet the peer data as a byte slice.AbGet as byte slice.BnThe (simulated) time this round took in total.DaThe difference in <code>RoundStats::duration</code>, as a factor.BcThe address of your local endpoint.DfCreates a <code>SimulatorConfig</code> by reading from environment \xe2\x80\xa6CjReturns <code>true</code> if the map contains no elements.CcReturns an iterator over the node ids of all peers.CfSeed for the random number generator used in the nodesCjInitialize the local state with a custom random number \xe2\x80\xa6BoBroadcasts a message to all nodes in the swarm.BcBroadcast a message for this topic.BaEmit an event to the application.0CdEach round, all peers broadcast a single message \xe2\x80\xa6BnAPI to control a <code>Gossip</code> instance.AkConnects to a set of peers.CiThis message was received from a direct neighbor that \xe2\x80\xa6ClThe message is broadcast only to the immediate neighbors \xe2\x80\xa6BcA simulator for the gossip protocolAlThe initial bootstrap nodes.AgBootstraps the network.BbBroadcasts a message to all nodes.AmSends a message to all peers.BlConfiguration for the gossip broadcast layerCnConvert to a hex string limited to the first 5 bytes for a \xe2\x80\xa6CgWhether this message was directly received from its \xe2\x80\xa6DcReturns <code>true</code> if we are connected to at least one node.0BcLists our current direct neighbors.ClReturns the neighbors a peer has on the swarm membership \xe2\x80\xa6CnCreates a new latency config with the provided min and max \xe2\x80\xa6DdRuns the simulation for <code>n</code> times the maximum latency \xe2\x80\xa6DcRuns the simulation while <code>f</code> returns <code>true</code>.BmJoin a gossip topic with the default options.CjWe have a new, direct neighbor in the swarm membership \xe2\x80\xa60AnStatistics for a gossip round.AiCreate from a byte array.BhHistograms of peer distribution metrics.AeJoins a set of peers.BlConfiguration for the swarm membership layerAlReturns the number of peers.BcThe number of peers in the network.CkPop the first entry, if equal or before <code>limit</code>.AbALPN protocol nameCjEach round a different sender is chosen at random, and \xe2\x80\xa6AhSubscribed gossip topic.BcOptions for joining a gossip topic.BiWhether this is a control or data messageBbMessage received from the network.0AmSend a message on the network0DdRemove and return all entries before and equal to <code>from</code>.ChReturns the time elapsed since starting the network, \xe2\x80\xa6kiroh-gossipBfNumber of times we connected to a peerCnReturns an iterator over the <code>State</code> for each peer.BeReturns the peer id of a random peer.BeResets the tracked stats for a topic.AeReset all statistics.AiNumber of topcis we left.AjSender for a gossip topic.CfA single sender broadcasts a single message per round.ClWe dropped direct neighbor in the swarm membership layer \xe2\x80\xa60AjThe identifier for a peer.BeTrigger a previously scheduled timer.0DkReturns <code>true</code> if the map contains a value for the specified \xe2\x80\xa6ClRemove all entries with an expiry instant lower or equal \xe2\x80\xa6AjRuns a round of gossiping.BmGet statistics for the gossip broadcast stateBnRemoves <code>n</code> peers from the network.BmRuns the simulation for <code>timeout</code>.BdVariants how to bootstrap the swarm.BdThe scope to deliver the message to.BeConfigures the latency between peers.BiConfiguration for a <code>Network</code>.C`A report on the state of a <code>Network</code>.CeSummary values for a list of <code>RoundStats</code>.ClSchedule a timer. The runtime is responsible for sending \xe2\x80\xa60CiDrains all queued events and returns them in a sorted \xe2\x80\xa6DkReturns <code>true</code> if this is a disconnect message (which is the \xe2\x80\xa6AgNumber of messages sentBkNumber of times we disconnected from a peerAkNumber of topcis we joined.Ck<code>ToString::to_string</code>, but without panic on OOM.0000000CdClose the connection to a peer on the network level.0BfReceiver for gossip events on a topic.BmConfiguration for the gossip broadcast layer.ClDifference (as factors) between two <code>RoundStats</code>.BlA hash map where entries expire after a timeBkUpdate the opaque peer data about yourself.0CgReturns a default latency config with a static latency.CmThe node that delivered the message. This is not the same \xe2\x80\xa6BcNumber of control messages receivedAoNumber of control messages sentB`Number of data messages receivedAlNumber of data messages sentCjNumber of times we accepted a connection from a remote \xe2\x80\xa6CfPush all events from an iterator into the IO containerAnTrack an <code>InEvent</code>.DjCreates <code>JoinOptions</code> with the provided bootstrap nodes and \xe2\x80\xa6BlConfiguration for the swarm membership layerBmConfiguration for the <code>Simulator</code>.BjNumber of times the main actor loop tickedChReturns a default latency config with a dynamic latency.DaWhen receiving an <code>IHave</code> message, this timeout is \xe2\x80\xa6DiThis timeout is registered when sending a <code>Graft</code> message. \xe2\x80\xa6CfInserts a new peer and joins a topic with a set of \xe2\x80\xa6AoTrack an <code>OutEvent</code>.BgPeer disconnected on the network level.0B`Set the broadcast configuration.DdTimeout after which <code>IHave</code> messages are pushed to peers.CbCheck if a topic has any active (connected) peers.CeCheck if this topic has any active (connected) peers.CkGet the maximum message size configured for this gossip \xe2\x80\xa6CnSets the maximum message size in bytes. By default this is \xe2\x80\xa6CmReturns the maximum message size configured in the gossip \xe2\x80\xa6AjMax message size in bytes.BfInterval duration for shuffle requestsBlError emitted when the gossip actor stopped.CgHistograms on the distribution of peers in the network.CnDifference, in factors, between two <code>RoundStatsAvg</code>BkHandle an incoming <code>Connection</code>.BaSet the membership configuration.AkNumber of messages receivedBmBroadcasts a message to all direct neighbors.CfInserts a new peer with the specified protocol config.CmJoin a gossip topic with the default options and wait for \xe2\x80\xa6BmBroadcasts a message to our direct neighbors.CeSends a message to our direct neighbors in the swarm.CkChecks if all neighbor and eager relations are synchronous.BkTotal size of all control messages receivedBgTotal size of all control messages sentBhTotal size of all data messages receivedBdTotal size of all data messages sentCoCalculates the <code>RoundStatsAvg</code> of all gossip rounds.BaJoin a gossip topic with options.DdThe minimum allowed value for <code>Config::max_message_size</code>.CjNumber of peers to which active connections are maintainedCmHow often the internal caches will be checked for expired \xe2\x80\xa6BmTimeout after which a gossip round is abortedDgDuration for which to keep the <code>MessageId</code>s for received \xe2\x80\xa6BnNumber of messages we broadcasted to all nodesC`Number of times we failed to dial a remote node.CeNumber of times we successfully dialed a remote node.CdNumber of peers for which contact information is \xe2\x80\xa6ClThe maximum number of messages that can be buffered in a \xe2\x80\xa6BbSNAFU context selector for the \xe2\x80\xa6CmThe protocol performs a tree optimization, which promotes \xe2\x80\xa6EfRuns the simulation while <code>f</code> returns <code>true</code>, aborting after \xe2\x80\xa6CnDuration for which to keep gossip messages in the internal \xe2\x80\xa6BnList of peers that don\xe2\x80\x99t have any neighbors.CkThe default maximum size in bytes for a gossip message. \xe2\x80\xa6CeNumber of messages we broadcasted to direct neighborsDhTimeout after which a <code>Neighbor</code> request is considered failedDiNumber of hops a <code>ForwardJoin</code> message is propagated until \xe2\x80\xa6DhNumber of active peers to be included in a <code>Shuffle</code> request.1DdNumber of passive peers to be included in a <code>Shuffle</code> \xe2\x80\xa6DgNumber of hops a <code>Shuffle</code> message is propagated until a \xe2\x80\xa6DhReturns <code>true</code> if the network contains peers that have no \xe2\x80\xa6")